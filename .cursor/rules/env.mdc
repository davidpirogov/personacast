---
description: Environment variables rules
globs: *.env*
alwaysApply: false
---
# Environment Variables Guidelines

## Naming and Formatting
- Environment variables should be in UPPERCASE
- Use only uppercase letters, numbers, and underscores in variable names
- Use underscores to separate words (e.g., `DATABASE_URL`)
- Remove spaces around `=` in environment variable assignments
- Quote values containing special characters, spaces, or shell operators
- Prefer single quotes for values to prevent variable expansion
- Group related variables with comments for better organization

## Security Best Practices
- NEVER commit sensitive information in `.env` files to version control
- Always add `.env` files to `.gitignore`
- Use strong, unique values for secrets and API keys
- Rotate secrets regularly, especially after team member departures
- Consider using a secrets management service for production environments
- Implement access controls for who can view/modify environment variables
- Audit environment variables regularly for sensitive information
- Use encryption for highly sensitive values when possible

## Sample Files
- Create sample files named `*.sample` (e.g., `.env.sample`) for all `.env` files
- Sample files should:
  - Include all required variables with descriptive placeholder values
  - Provide clear comments explaining each variable's purpose
  - Include example values that are obviously not real credentials
  - Document any default values or fallbacks in the application
  - Indicate which variables are required vs. optional
  - Show proper formatting for complex values

## Documentation
- Document all environment variables in a central location
- Include descriptions, acceptable values, and default values
- Document any validation rules applied to environment variables
- Explain the impact of each variable on application behavior
- Consider removing or documenting commented environment variables

## Implementation
- Validate environment variables at application startup
- Provide meaningful error messages for missing required variables
- Set sensible defaults where appropriate
- Consider using typed environment variables in code
- Load different environment files based on deployment environment
- Implement a hierarchical loading strategy (e.g., `.env.local` overrides `.env`)

## Example Files Structure
- `.env` - Local development variables (gitignored)
- `.env.sample` - Template for environment file

## Sample File Example
```
# Database Configuration
DATABASE_URL='postgresql://user:password@localhost:5432/dbname'  # Required: Connection string for the database
DATABASE_POOL_SIZE='10'  # Optional: Number of connections to maintain (default: 5)

# API Configuration
API_KEY='your_api_key_here'  # Required: API key for external service
API_TIMEOUT='30'  # Optional: Timeout in seconds (default: 60)

# Feature Flags
ENABLE_NEW_FEATURE='false'  # Optional: Enable experimental features (default: false)
```

## Validation and Loading
- Consider using a validation library to ensure environment variables meet requirements
- Implement type conversion for non-string values (numbers, booleans, etc.)
- Document the loading order when multiple environment files are used
- Consider using environment-specific files (`.env.development`, `.env.test`, etc.)

## CI/CD Considerations
- Store sensitive environment variables in CI/CD secrets management
- Validate environment variables as part of the CI pipeline
- Generate environment-specific files during deployment
- Consider using different variable sets for different deployment stages