---
description: Dockerfile
globs: *Dockerfile*
alwaysApply: false
---
# Dockerfile Best Practices

## Base Image Selection

- Use official, minimal, and specific base images whenever possible.
- Prefer to use images based on Ubuntu, Debian, or Alpine in that order of priority.
- Always specify exact version tags rather than using `latest`:
  ```dockerfile
  FROM golang:1.23.5-bookworm
  ```
- Consider using distroless or security-focused base images for production.

## ARG and ENV Usage

- Define build-time arguments at the top of the Dockerfile for better visibility and reusability:
  ```dockerfile
  ARG APP_VERSION="1.0.0"
  ARG NODE_VERSION="22.0.0"
  ```
- Use ARGs for values that should be configurable at build time.
- Use ENVs for values that should be available at runtime:
  ```dockerfile
  ENV APP_HOME=/app
  ENV PATH="${APP_HOME}/bin:${PATH}"
  ```
- Reference ARGs in FROM statements to make base image versions configurable:
  ```dockerfile
  ARG BASE_IMAGE_VERSION="1.23.5-bookworm"
  FROM golang:${BASE_IMAGE_VERSION}
  ```

## Multi-stage Builds

- Use multi-stage builds to reduce final image size:
  ```dockerfile
  ARG NODE_VERSION="18"
  ARG BITNAMI_NGINX_VERSION="1.27.3"
  FROM node:${NODE_VERSION} AS builder
  WORKDIR /build
  COPY . .
  RUN npm ci && npm run build
  
  FROM bitnami/nginx:${BITNAMI_NGINX_VERSION}
  COPY --from=builder /build/dist /usr/share/nginx/html
  ```
- Name your build stages for clarity.
- Only copy necessary artifacts from build stages to the final image.

## WORKDIR, COPY, and ADD

- Always set a WORKDIR instead of using absolute paths:
  ```dockerfile
  WORKDIR /app
  ```
- Prefer COPY over ADD unless you specifically need ADD's tar extraction or remote URL capabilities.
- Be specific about what files you COPY to minimize cache invalidation:
  ```dockerfile
  COPY package.json package-lock.json ./
  RUN npm ci
  COPY . .
  ```

## RUN Commands

- Combine related RUN commands with `&&` to reduce layer count:
  ```dockerfile
  RUN apt-get update && \
      apt-get install -y --no-install-recommends curl ca-certificates && \
      rm -rf /var/lib/apt/lists/*
  ```
- Always clean up package manager caches in the same layer they were created.
- For package installations, use `--no-install-recommends` with apt-get to minimize size.
- Pin specific versions of packages when installing.

## Non-root User

- Create and use a non-root user for running the application:
  ```dockerfile
  ARG USER_ID=1000
  ARG GROUP_ID=1000
  
  RUN if getent group ${GROUP_ID} ; then \
          echo "Group ${GROUP_ID} already exists" ; \
      else \
          groupadd -g ${GROUP_ID} appuser ; \
      fi && \
      if getent passwd ${USER_ID} ; then \
          echo "User ${USER_ID} already exists" ; \
      else \
          useradd -u ${USER_ID} -g appuser -s /bin/bash -m appuser ; \
      fi

  USER appuser
  ```
- Switch to the non-root user as soon as possible, but after any commands requiring root privileges.
- Make USER statements configurable with ARGs for flexibility across environments.

## HEALTHCHECK

- Include a HEALTHCHECK instruction for container health monitoring:
  ```dockerfile
  HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
      CMD curl -f http://localhost:8080/health || exit 1
  ```
- Ensure the health check command is lightweight and reliable.
- Adjust interval, timeout, and retries based on your application's characteristics.
- Install any tools needed for health checking (like curl) before switching to a non-root user.

## EXPOSE, VOLUME, and CMD/ENTRYPOINT

- Document exposed ports with the EXPOSE instruction:
  ```dockerfile
  EXPOSE 8080
  ```
- Declare volumes for persistent or shared data:
  ```dockerfile
  VOLUME ["/data"]
  ```
- Use ENTRYPOINT for the main executable and CMD for default arguments:
  ```dockerfile
  ENTRYPOINT ["node"]
  CMD ["server.js"]
  ```
- Alternatively, use CMD alone for simple cases:
  ```dockerfile
  CMD ["nginx", "-g", "daemon off;"]
  ```

## Labels and Metadata

- Include metadata using LABEL instructions:
  ```dockerfile
  LABEL maintainer="team@example.com"
  LABEL version="1.0.0"
  LABEL description="Application description"
  ```
- Consider using OCI Image Format labels for standardization.

## Caching and Layer Optimization

- Order instructions from least to most frequently changing to optimize build cache.
- Use .dockerignore to exclude unnecessary files from the build context.
- Consider using build cache mounts for package managers:
  ```dockerfile
  RUN --mount=type=cache,target=/var/cache/apt \
      apt-get update && apt-get install -y package
  ```

## Security Considerations

- Scan images for vulnerabilities before deployment.
- Avoid installing unnecessary packages or development tools in the final image.
- Set appropriate file permissions for application files.
- Never include secrets or credentials in the Dockerfile.
- Use multi-stage builds to minimize attack surface.

## Common Mistakes to Avoid

- Don't run processes as root in production containers.
- Don't use latest tag for production images.
- Don't install unnecessary packages.
- Don't leave default passwords or credentials.
- Don't ignore HEALTHCHECK in production images.
- Don't use ADD when COPY is sufficient.
