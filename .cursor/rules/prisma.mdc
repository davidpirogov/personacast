---
description: 
globs: *.prisma,prisma/*,**/prisma.ts
alwaysApply: false
---
# Prisma Schema Rules

## Model ID Fields

- Use integer IDs with auto-increment as the primary key
- Follow this pattern for all models:

```prisma
id          Int      @id @default(autoincrement())
```

## Timestamp Fields

Every model should include these timestamp fields:

```prisma
createdAt   DateTime @default(now()) @map("created_at")
updatedAt   DateTime @updatedAt @map("updated_at")
```

## Column Naming

- Use camelCase for Prisma field names
- Use snake_case for database column names via `@map`
- Example:

```prisma
publishedAt DateTime? @map("published_at")
isActive    Boolean   @default(true) @map("is_active")
```

## Table Naming

- Use plural form for table names
- Add table mapping using `@@map`
- Example:

```prisma
model ApiClient {
  // ... fields ...

  @@map("api_clients")
}
```

## Adapters

Make sure to import the correct Prisma and database clients: 
```typescript
import { Prisma } from "@prisma/client";
import { db } from "@/lib/database/prisma";
```

The rest of the adapter should follow TypeScript best practice and include transaction support. 
For example, an `Entity` adapter `getAll` method should look like
```typescript
async getAll(tx?: Prisma.TransactionClient): Promise<Entity[]> {
    const client = tx || db;
    const entities = await client.account.findMany();
    return entities as Entity[];
}
```
